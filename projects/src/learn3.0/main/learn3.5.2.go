package main

import "fmt"

// 学习第三章--3.5-字符串--Unicode
func main() {
	fmt.Println("learn3.5.2")

	/*
		从前，事情简单明晰，至少，狭隘地看 ， 软件只须处理一个字符集： ASCII (美国信息交换标准码)。
		ASCII (或更确切地说， US-ASCII) 码使用 7位表示 128个“字符”：  大小写英文字母、数字、各种标点和设备控制符。
		这对早期的计算机行业已经足够了， 但是让世界上众多使用其他语言的人 无法在计算机上使用自己的文书体系。
		随着互联网的兴起，包含纷繁语言的数据屡见不鲜。 到底怎样才能应付语言的繁杂多样，还能兼顾高效率？

		答案是 Unicode (unicode.org), 它囊括了世界上所以文书体系的全部字符， 还有重音符和其他变音符，
			控制码(如制表符 和 回车符)，以及许多特有文字，对它们各自赋予一个叫 Unicode 码点的标准数字。
			在 Go 的术语中，这些字符记号称为文字符号 (rune)。

		Unicode 第8版定义了超过一百种语言文字的12万个字符的码点。
			它们在计算机程序和数据中如何表示？ 天然适合保存单个文字符号的数据类型就是 int32，为 Go 所采用；
			正因如此， rune 类型作为 int32 类型的别名。

		我们可以将文字符号的序列表示成 int32 值序列， 这种表示方式称作 UTF-32 或 UCS-4，
			每个Unicode 码点的编码长度相同，都是 32位。 这种编码简单划一，
			可是因为大多数面向计算机的可读文本是 ASCII 码， 每个字符只需8位，也就是一个字节，导致了不必要的存储空间消耗。
			而使用广泛的字符的数目也 少于65556 个，字符用 16位就能容纳。 我们能作改进吗？


	 */
}
